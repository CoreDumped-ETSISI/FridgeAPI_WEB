#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const chalk = require('chalk');
const mongoose = require('mongoose');

const config = require('../config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.PORT || '3000');
let server;
app.set('port', port);

/**
 * Create HTTP server.
 */


/**
 * Listen on provided port, on all network interfaces.
 */

mongoose.Promise = global.Promise;
mongoose.set('useCreateIndex', true);

mongoose.connect(config.MONGODB, {useNewUrlParser: true}).then(
    () => {
        console.log(chalk.bgBlackBright('\t\t\t\t\t\t\t\t\t' +
            'Connection to ' + config.MONGODB + ' was succesfull' +
            '\t\t\t\t\t\t\t\t\t'));
        server = http.createServer(app);
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    },
    err => {
        console.error('ERROR: connecting to Database. ' + err)
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log(chalk.bgCyan('\t\t\t\t\t\t\t\t\t\t\t\t' +
        'Server running and listening on ' + bind +
        '\t\t\t\t\t\t\t\t\t\t\t\t'));
}
